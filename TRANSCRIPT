Hi everyone, my name is Raphael Rafatpanah and today my talk is going to be
about Reason. I will give a brief introduction to Reason and then we will
jump right into building a real web application. My goal here is to get those
familiar with ReactJS and Redux to feel quite comfortable with Reason.

We will explain details as we go, and please feel free to ask questions.

A quick about me:

I work at precisioneffect where we build creative campaigns with
pharmaceutical, device, and diagnostic companies that are changing the way
medicine is practiced.

I want to say up front that I don't have a traditional computer science
background nor do I have much ML experience. But that's okay because ReasonML
was made to be welcoming to JavaScript developers.

So what is Reason?

Reason was created by Jordan Walke, the same person who created ReactJS.
It's a new syntax and toolchain for the OCaml language that is meant to be
welcoming to JavaScript developers. And with Reason, we can take advantage of both
the JavaScript and OCaml ecosystems.

In this talk, I'm going to be focusing on the web side of things, but it's
nice to know that you can do so much more with this. For example, native
iOS / native Android / Windows / unikernels / etc.

So let's ask: Why do we need Reason when we have React?

ReactJS was a stepping stone to Reason.

Jordan Walke, the creator of React, started the concept of Reason before
ReactJS. At that time, the compile-to-JS landscape was not as mature as 
it is now. Additionally, when the idea for React was first prototyped in 
SML, the JavaScript community was not ready for a functional paradigm. 
Four years later, they now believe the time is right for Reason.

As of 7/27/17, 50% of messenger.comâ€™s UI Components have been converted to
Reason.

The rest of the talk is going to assume that you've made the decision to 
give Reason a shot and you're coming from ReactJS and maybe you have some
Redux experience.

For those that are looking to be convinced further, please see the following
list of resources.

/*

Okay, so let's walk through building this simple application together.

Here is a simple video player. You can toggle the video state as well as
a modal state. The control buttons reflect the state of the player. Great.

Ok, so how do we do this...

*/


add hype
option to replace JS
ocaml is obscure which is why reasonml was created
first time mentioning reasonml
shoudl look familiar
highlight code
built in meta language
interop!!!! bindings

takeaways

comfortable
comfortablecta 


theme types interop refactor
bugs

pictures
slow
how easy it is to do it

https://www.youtube.com/watch?v=gZweJw_egaE&list=PLYU6eGtVFu8ZG3yh1FfLrqHBMUXj80wgK
1:32


THANK YOU TO PEOPLE


http://www.npmtrends.com/angular-vs-react-vs-vue-vs-bs-platform

